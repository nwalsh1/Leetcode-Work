class Solution {
public:
    int sum(int num1, int num2) {
        return num1 + num2;
    }

    bool checkTree(TreeNode* root) {
        return root->val == root->left->val + root->right->val;
    }

    int removeDuplicates(vector<int>& nums) {
       
        
        for(int i = 1; i < nums.size(); i++){
            if(nums[i-1]==nums[i]){
                nums.erase(nums.begin()+i-1);
                i--;
            }
        }
        
        return nums.size();
    }

    int maxProfit(vector<int>& prices) {
        int profit = 0;
        for(int i = 0; i < prices.size()-1; i++){
            if(prices[i]<prices[i+1]){
                profit = profit + (prices[i+1]-prices[i]);
            }
        }
        
        return profit;
    }

    void rotate(vector<int>& nums, int k) {
        
        
        if(k > nums.size()){
            k = k % nums.size();
        }
        
        if(nums.size() < 1){
            return;
        }
        
//      solution 1: O(n) memory used
//         int temp[nums.size()];
//         for(int i = 0; i < nums.size(); i++){
//             if(i < k){
//                 temp[i] = nums[nums.size()-k+i];
//             }else{
//                 temp[i] = nums[i-k];
//             }

//         }

//         for(int i = 0; i < nums.size(); i++){
//             nums[i] = temp[i];
//         }
        
        
//      solution 2 double reverse
        
        int temp;
        for(int i = 0; i < nums.size()/2; i++){
            temp = nums[i];
            nums[i] = nums[nums.size()-1-i];
            nums[nums.size()-1-i] = temp;
        }
        
        for(int i = 0; i < k/2; i++){
            temp = nums[i];
            nums[i] = nums[k-1-i];
            nums[k-1-i] = temp;
        }
        
        for(int i = 0; i < (nums.size()/2 - k/2); i++){
            temp = nums[i+k];
            nums[i+k] = nums[nums.size()-1-i];
            nums[nums.size()-1-i] = temp;
        }
        
        
        
        
    }

    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(),nums.begin()+nums.size());
        bool check = false;
        if(nums.size() < 0){
            return true;
        }
        
        for(int i = 1; i < nums.size();i++){
            if(nums[i]==nums[i-1]){
                check = true;
            }
        }
        return check;
    }

    int singleNumber(vector<int>& nums) {
        if(nums.size() < 3){
            return nums[0];
        }
        
        int sum = 0;
        for(int i = 0; i < nums.size(); i ++){
           
            sum ^= nums[i];
            
        }
        return sum;
    }

    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int> intersection;
        int iter = 0;
        for(int i = 0; i < nums1.size(); i++){
            int j = 0;
            for(j = 0; j < nums2.size(); j++){
                if(nums1[i]==nums2[j]){
                    intersection.push_back(nums1[i]);
                    nums2.erase(nums2.begin()+j);
                    break;
                }
            }
        } 
        return intersection;
    }

    vector<int> plusOne(vector<int>& digits) {
        if(digits[digits.size()-1] < 9){
            digits[digits.size()-1] ++;
            return digits;
        }else{
            digits[digits.size()-1] = 10;
            for(int i = digits.size()-1;i != -1 ;i--){
                if(i == 0 && digits[i] == 10){
                    digits[i] = 1;
                    digits.push_back(0);
                }else if(digits[i] == 10){
                    digits[i] = 0;
                    digits[i - 1] += 1;
                }
                
            }
        }
        return digits;
    }

    void moveZeroes(vector<int>& nums) {
        //vector<int> ans;
        int numZeroes = 0;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] == 0){
                nums.erase(nums.begin()+i);
                numZeroes++;
                i--;
            }
        }
        for(int i = 0; i < numZeroes; i++){
            nums.push_back(0);
        }    

        
    }

    

};
